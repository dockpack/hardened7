---

- name: assert current platform
  assert:
    that:
      - ansible_os_family == 'RedHat'
      - ansible_distribution_major_version == "7"

- name: check presence of portmapper
  stat:
    path: /var/run/rpcbind.sock
  register: portmapper

- name: stop portmapper
  systemd:
    name: rpcbind.socket
    state: stopped
    enabled: false
  ignore_errors: true
  when: portmapper.stat.exists

- name: disable portmapper
  systemd:
    name: rpcbind.service
    state: stopped
    enabled: false
  failed_when: false

- name: configure mail transfer agent for local-only mode
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^inet_interfaces'
    line: 'inet_interfaces = localhost'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: configure mail transfer agent for mydomain
  when: mydomain is defined
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^mydomain ='
    line: 'mydomain = {{ mydomain }}'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: configure mail transfer agent for mydomain.mydomain
  when: mydomain is defined
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^myhostname ='
    line: 'myhostname = {{ inventory_hostname }}.{{ mydomain }}'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: configure mail transfer agent for smtp
  when: mydomain is defined
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^myorigin = '
    line: 'myorigin = $mydomain'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: do not disclose software version in SMTP banner
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: 'smtpd_banner'
    line: 'smtpd_banner = $myhostname ESMTP'
    state: present
  notify: restart postfix

- name: configure mail transfer agent for ipv4 only
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^inet_protocols'
    line: 'inet_protocols = ipv4'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: remove rsh trust files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/hosts.equiv
    - /root/hosts.equiv

- block:
    - name: detect shosts.equiv files on the system
      find:
        paths: /
        recurse: true
        patterns: shosts.equiv
      check_mode: false
      register: shosts_equiv_locations

    - name: remove rsh trust files
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ shosts_equiv_locations.files }}"
      when: shosts_equiv_locations
##

- name: Ensure correct mount options set on /dev/shm
  mount:
    name: /dev/shm
    state: mounted
    fstype: tmpfs
    src: '/dev/shm'
    opts: 'rw,noexec,nosuid,nodev,seclabel'

- name: Ensure correct mount options set on /dev/shm
  command: 'mount -o remount,rw,noexec,nosuid,nodev,seclabel tmpfs /dev/shm'
  changed_when: false
  args:
    warn: false

## Kernel
- name: manage_kernel modules
  when: manage_kernel|bool
  copy:
    src: modprobe.conf
    dest: /etc/modprobe.d/CIS.conf
    owner: root
    group: root
  tags:
    - kernel

- name: manage_kernel parameters
  when: manage_kernel|bool
  template:
    src: 999-sysctl.conf.j2
    dest: /etc/sysctl.d/999-sysctl.conf
    owner: root
    group: root
  notify: reload kernel parameters

## ipv6
- name: disable ipv6 in kernel
  when: disable_ipv6 is defined and disable_ipv6|bool
  copy:
    src: "{{ item }}"
    dest: "/etc/modprobe.d/{{ item }}"
    owner: root
    group: root
  with_items:
    - disabled.conf
  tags:
    - disable_ipv6

- name: Optional SSH configuration
  when: disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?AddressFamily'
    line: 'AddressFamily inet'
    state: present
  notify: restart sshd

- name: disable interface usage of ipv6
  when: disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: '^NETWORKING_IPV6'
    line: 'NETWORKING_IPV6=no'
    state: present
  tags:
    - disable_ipv6

- name: disable interface usage of ipv6
  when: disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: '^IPV6INIT'
    line: 'IPV6INIT=no'
    state: present
  tags:
    - disable_ipv6

- name: check if libtirpc confile file is present
  stat:
    path: /etc/netconfig
  register: netconfig
  tags:
    - disable_ipv6

- name: disable support for rpc udp6
  when:
    - netconfig.stat.exists
    - disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/netconfig
    regexp: 'udp6'
    line: '# udp6       tpi_clts      v     inet6    udp     -       -'
    state: present
  tags:
    - disable_ipv6

- name: disable support for rpc ipv6
  when: netconfig.stat.exists and disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/netconfig
    regexp: 'tcp6'
    line: '# tcp6       tpi_cots_ord  v     inet6    tcp     -       -'
    state: present
  tags:
    - disable_ipv6

## Network
- name: Increase DNS query attempts
  lineinfile:
    path: /etc/sysconfig/network
    regexp: "^RES_OPTIONS="
    line: 'RES_OPTIONS="timeout:1 attempts:5"'
  notify: restart network
  tags:
    - dnsconfig

- name: disable zeroconf networking
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: '^NOZEROCONF'
    line: 'NOZEROCONF=yes'
    state: present

## Logon
- name: manage direct root login device
  copy:
    content: "{{ securetty }}"
    dest: /etc/securetty
    owner: root
    group: root
    mode: 0600
  tags:
    - permissions

- name: ensure the logon.defs are set
  when: manage_password_compliance|bool
  template:
    src: login.defs.j2
    dest: /etc/login.defs
    owner: root
    group: root
    mode: 0644
  tags:
    - permissions

- name: create the password policy file
  when:
    - manage_password_compliance|bool
    - pwquality is defined and pwquality|bool
  template:
    src: pwquality.conf.j2
    dest: /etc/security/pwquality.conf
    owner: root
    group: root
    mode: 0644
  tags:
    - permissions

- name: set account expiration following inactivity
  when: manage_password_compliance|bool
  lineinfile:
    state: present
    dest: /etc/default/useradd
    regexp: '^INACTIVE='
    line: 'INACTIVE=30'
  tags:
    - chage

- name: ensure minimum days between password changes is 7 or more
  when: manage_password_compliance|bool
  shell: >
    set -o pipefail; \
    for user in `grep ":x:[0-9]\{4\}" /etc/passwd|cut -d: -f1`; \
      do chage --mindays {{ PASS_MIN_DAYS }} $user; \
    done
  tags:
    - chage

- name: ensure password expiration is 90 days or less
  when: manage_password_compliance|bool
  shell: >
    set -o pipefail; \
    for user in `grep ":x:[0-9]\{4\}" /etc/passwd|cut -d: -f1`; \
      do chage --maxdays {{ PASS_MAX_DAYS }} $user; \
    done
  tags:
    - chage

# we use only authorized_keys, this hack is for CIS compliance
- name: update the password change date
  when: manage_password_compliance|bool
  shell: >
    set -o pipefail; \
    for user in `grep ":x:[0-9]\{4\}" /etc/passwd|cut -d: -f1`; \
      do chage -d today $user; \
    done
  tags:
    - chage

- name: ensure password hashing algorithm is SHA-512
  when: manage_password_compliance|bool
  command: authconfig --passalgo=sha512 --update
  changed_when: false
  tags:
    - authconfig

- name: set password hashing algorithm in /etc/libuser.conf
  when: manage_password_compliance|bool
  lineinfile:
    state: present
    dest: /etc/libuser.conf
    regexp: '^crypt_style'
    line: 'crypt_style = sha512'

- name: prevent log in to accounts with empty password - system-auth
  when:
    - manage_password_compliance|bool
    - password_required is defined and password_required|bool
  replace:
    dest: /etc/pam.d/system-auth
    follow: true
    regexp: 'nullok'

- name: prevent log in to accounts with empty password - password-auth
  when:
    - manage_password_compliance|bool
    - password_required is defined and password_required|bool
  replace:
    dest: /etc/pam.d/password-auth
    follow: true
    regexp: 'nullok'

- name: 'Do not allow users to reuse recent passwords - password-auth (change)'
  when: manage_password_compliance|bool
  replace:
    dest: /etc/pam.d/password-auth
    follow: true
    # yamllint disable-line rule:line-length
    regexp: '^(password\s+sufficient\s+pam_unix\.so\s.*remember\s*=\s*)(\S+)(.*)$'
    replace: '\g<1>{{ pam_unix_remember }}\g<3>'

- name: 'Do not allow users to reuse recent passwords - password-auth (add)'
  when: manage_password_compliance|bool
  replace:
    dest: /etc/pam.d/password-auth
    follow: true
    regexp: '^password\s+sufficient\s+pam_unix\.so\s(?!.*remember\s*=\s*).*$'
    replace: '\g<0> remember={{ pam_unix_remember }}'

- name: 'Do not allow users to reuse recent passwords - system-auth (change)'
  when: manage_password_compliance|bool
  replace:
    dest: /etc/pam.d/system-auth
    follow: true
    # yamllint disable-line rule:line-length
    regexp: '^(password\s+sufficient\s+pam_unix\.so\s.*remember\s*=\s*)(\S+)(.*)$'
    replace: '\g<1>{{ pam_unix_remember }}\g<3>'

- name: 'Do not allow users to reuse recent passwords - system-auth (add)'
  when: manage_password_compliance|bool
  replace:
    dest: /etc/pam.d/system-auth
    follow: true
    regexp: '^password\s+sufficient\s+pam_unix\.so\s(?!.*remember\s*=\s*).*$'
    replace: '\g<0> remember={{ pam_unix_remember }}'

- name: clear interactive session timeout
  when: not manage_timeout|bool
  lineinfile:
    state: absent
    dest: /etc/profile
    regexp: '^TMOUT='
  tags:
    - manage_timeout

- name: set interactive session timeout
  when: manage_timeout|bool
  lineinfile:
    state: present
    dest: /etc/profile
    regexp: '^TMOUT='
    line: 'TMOUT={{ TMOUT }}'
  tags:
    - manage_timeout

- name: Setup bash command history timestamps
  template:
    src: history.sh
    dest: /etc/profile.d/history.sh
    owner: root
    group: root
    mode: 0644
  tags:
    - bash_history
    - permissions

- name: disable ctrl-alt-del reboot activation, please auditors
  file:
    path: /etc/systemd/system/ctrl-alt-del.target
    src: /dev/null
    state: link

- name: kernel core dumps must be disabled unless needed
  service:
    name: kdump
    enabled: false
    state: stopped
  register: service_result
  failed_when:
    - service_result is failed
    - "'Could not find the requested service' not in service_result.msg"
  ignore_errors: true

- name: manage kernel parameters
  template:
    src: 999-sysctl.conf.j2
    dest: /etc/sysctl.d/999-sysctl.conf
    owner: root
    group: root
  notify: reload kernel parameters

- name: ensure core dumps are restricted
  lineinfile:
    state: present
    dest: /etc/security/limits.conf
    regexp: '^#?\\*.*core'
    line: '* hard core 0'
    insertbefore: '^# End of file'

- name: limit the number of concurrent login sessions allowed per user
  lineinfile:
    state: present
    dest: /etc/security/limits.conf
    regexp: '^#?\\*.*maxlogins'
    line: '*           hard    maxlogins     10'
    insertbefore: '^# End of file'

- name: SELinux security policy
  lineinfile:
    dest: /etc/selinux/config
    regexp: '^SELINUX=.*'
    line: 'SELINUX={{ SELINUX }}'
    state: present

- name: set SELinux type
  lineinfile:
    dest: /etc/selinux/config
    regexp: '^SELINUXTYPE.*'
    line: 'SELINUXTYPE={{ SELINUXTYPE }}'
    state: present

- name: set CtrlAltDelBurstAction=none
  lineinfile:
    dest: /etc/systemd/system.conf
    regexp: '^(#)?CtrlAltDelBurstAction'
    line: 'CtrlAltDelBurstAction=none'
    state: present

- name: restrict permissions on logfile
  file:
    path: /var/log/dmesg
    mode: 0640
  tags:
    - permissions

- name: set logrotate interval to daily
  lineinfile:
    dest: /etc/logrotate.conf
    regexp: '^weekly'
    line: "daily"
    backrefs: true
  tags:
    - logrotate

- name: set logrotate retention period to 7 days
  lineinfile:
    dest: /etc/logrotate.conf
    regexp: '^rotate 4'
    line: "rotate 7"
    backrefs: true
  tags:
    - logrotate

# Yum
- name: ensure repo_gpgcheck is activated
  when: repo_gpgcheck_global|int == 1
  lineinfile:
    path: /etc/yum.conf
    regexp: "^repo_gpgcheck"
    line: "repo_gpgcheck = {{ repo_gpgcheck_global }}"
    state: present

- name: lineinfile if gpgcheck should be globally activated
  lineinfile:
    path: /etc/yum.conf
    regexp: "^gpgcheck"
    line: "gpgcheck={{ gpgcheck_global }}"
    state: present

- name: find all yum repositories
  when: gpgcheck_all_repos|int == 1
  find:
    paths: "/etc/yum.repos.d/"
    patterns: "*.repo"
    contains: ^\[.+]$
  register: yum_find

- name: enable gpgcheck for all yum package repositories
  when: gpgcheck_all_repos|int == 1
  lineinfile:
    create: true
    dest: "{{ item.path }}"
    regexp: '^gpgcheck=0'
    state: absent
  with_items: "{{ yum_find.files }}"

- name: ensure gpgcheck is activated for local packages
  lineinfile:
    path: /etc/yum.conf
    regexp: "^localpkg_gpgcheck"
    line: "localpkg_gpgcheck={{ localpkg_gpgcheck }}"
    state: present

- name: ensure yum removes previous package versions
  lineinfile:
    dest: /etc/yum.conf
    regexp: ^#?clean_requirements_on_remove
    line: "clean_requirements_on_remove={{ clean_requirements_on_remove }}"
    insertafter: '\[main\]'

- name: remove insecure daemons
  yum:
    name: "{{ insecure_daemons }}"
    state: absent
  ignore_errors: true

# TCP Wrappers
- name: install tcp_wrappers for SSH and HTTPS
  when: tcp_wrappers is defined and tcp_wrappers|bool
  yum:
    name: tcp_wrappers
    state: present

- name: install tcp_wrappers for SSH and HTTPS
  when: tcp_wrappers is defined and tcp_wrappers|bool
  template:
    src: "{{ item }}"
    dest: /etc/
    owner: root
    group: root
  with_items:
    - hosts.allow
    - hosts.deny

## XWindows
- name: ensure xorg-x11-server-common is removed
  package:
    name: xorg-x11-server-common
    state: absent

- name: install security packages
  yum:
    state: present
    name:
      - openssh
      - openssh-clients
      - openssh-server
      - libsemanage-python
      - libreswan
      - policycoreutils-python
      - ca-certificates
      - jq
      - screen
      - dracut-fips
      - aide
  tags:
    - openssh
    - aide

## AIDE
- name: use FIPS 140-2 for validating hashes
  when: use_aide|bool
  lineinfile:
    state: present
    dest: /etc/aide.conf
    regexp: '^NORMAL'
    line: 'NORMAL = FIPSR+sha512'
  tags:
    - aide

- name: "Build and Test AIDE Database"
  when: use_aide|bool
  command: /usr/sbin/aide --init
  args:
    creates: /var/lib/aide/aide.db.gz
  tags:
    - aide

# mainly to allow ansible's check mode to work
- name: "check whether the stock AIDE database exists"
  when: use_aide|bool
  stat:
    path: /var/lib/aide/aide.db.new.gz
  register: aide_database_stat
  tags:
    - aide

- name: "stage AIDE database"
  copy:
    src: /var/lib/aide/aide.db.new.gz
    dest: /var/lib/aide/aide.db.gz
    backup: true
    remote_src: true
  when:
    - use_aide|bool
    - aide_database_stat.stat.exists is defined
    - aide_database_stat.stat.exists
  tags:
    - aide

- name: "configure periodic execution of AIDE"
  when: use_aide|bool
  cron:
    name: "run AIDE check"
    minute: '0'
    hour: '5'
    weekday: '*'
    job: "/usr/sbin/aide --check"
  tags:
    - aide

- name: ensure prelink is disabled
  yum:
    name: prelink
    state: absent

- name: Add auth pam_faillock preauth unlock_time before pam_unix.so
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: 'preauth
        audit
        silent
        deny=5
        unlock_time={{ pam_faillock_unlock_time }}'
    state: before
  loop:
    - system-auth
    - password-auth

- name: Add unlock_time argument to pam_faillock preauth
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    control: required
    module_path: pam_faillock.so
    module_arguments: 'preauth
        silent
        unlock_time={{ pam_faillock_unlock_time }}'
    state: args_present
  loop:
    - system-auth
    - password-auth

- name: Add auth pam_faillock authfail unlock_interval after pam_unix.so
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: '[default=die]'
    new_module_path: pam_faillock.so
    module_arguments: 'authfail
        unlock_time={{ pam_faillock_unlock_time }}'
    state: after
  loop:
    - system-auth
    - password-auth

- name: Add unlock_time argument to auth pam_faillock authfail
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    control: '[default=die]'
    module_path: pam_faillock.so
    module_arguments: 'authfail
        unlock_time={{ pam_faillock_unlock_time }}'
    state: args_present
  loop:
    - system-auth
    - password-auth

- name: Add account pam_faillock before pam_unix.so
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: account
    control: required
    module_path: pam_unix.so
    new_type: account
    new_control: required
    new_module_path: pam_faillock.so
    state: before
  loop:
    - system-auth
    - password-auth
##

- name: Add auth pam_faillock preauth deny before pam_unix.so
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: 'preauth
        silent
        deny={{ pam_faillock_deny }}'
    state: before
  loop:
    - system-auth
    - password-auth

- name: Add deny argument to auth pam_faillock preauth
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    control: required
    module_path: pam_faillock.so
    module_arguments: 'preauth
        silent
        deny={{ pam_faillock_deny }}'
    state: args_present
  loop:
    - system-auth
    - password-auth

- name: Ensure access to the su command is restricted
  when: pam_manage|bool
  pamd:
    name: su
    type: auth
    control: sufficient
    module_path: pam_rootok.so
    new_type: auth
    new_control: required
    new_module_path: pam_wheel.so
    module_arguments: 'use_uid'
    state: after
  tags:
    - restrict_su

- name: Add auth pam_faillock authfail deny after pam_unix.so
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: '[default=die]'
    new_module_path: pam_faillock.so
    module_arguments: 'authfail
        deny={{ pam_faillock_deny }}'
    state: after
  loop:
    - system-auth
    - password-auth

- name: Add deny argument to auth pam_faillock authfail
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: auth
    new_type: auth
    control: '[default=die]'
    module_path: pam_faillock.so
    module_arguments: 'authfail
        deny={{ pam_faillock_deny }}'
    state: args_present
  loop:
    - system-auth
    - password-auth

- name: Add account pam_faillock before pam_unix.so
  when: pam_manage|bool
  pamd:
    name: "{{ item }}"
    type: account
    control: required
    module_path: pam_unix.so
    new_type: account
    new_control: required
    new_module_path: pam_faillock.so
    state: before
  loop:
    - system-auth
    - password-auth

## Sebooleans
- name: disable sebooleans that should be disabled
  seboolean:
    name: "{{ item }}"
    state: false
    persistent: true
  with_items: "{{ selinux_booleans_disable }}"
  when: SELINUX == "enforcing" and manage_sebooleans|bool

- name: enable sebooleans that should be enabled
  seboolean:
    name: "{{ item }}"
    state: true
    persistent: true
  with_items: "{{ selinux_booleans_enable }}"
  when: SELINUX == "enforcing" and manage_sebooleans|bool

- name: "Read list of files with incorrect permissions"
  shell: "rpm -Va | grep '^.M' | sed -r 's;^.*\\s+(.+);\\1;g'"
  args:
    warn: false
  register: files_with_incorrect_permissions
  failed_when: false
  changed_when: false
  tags:
    - skip_ansible_lint  # C2S Openscap content

- name: "Correct file permissions with RPM"
  shell: "rpm --setperms $(rpm -qf '{{ item }}')"
  args:
    warn: false
  with_items: "{{ files_with_incorrect_permissions.stdout_lines }}"
  when: files_with_incorrect_permissions.stdout_lines | length > 0
  failed_when: false

- name: "Verify grub.cfg permissions"
  file:
    path: '/boot/grub2/grub.cfg'
    owner: root
    group: root
    mode: 0600
  tags:
    - permissions

- name: "Verify /etc/passwd- permissions"
  file:
    path: '/etc/passwd-'
    owner: root
    group: root
    mode: 0600
  tags:
    - permissions

- name: "Verify /etc/group- permissions"
  file:
    path: '/etc/group-'
    owner: root
    group: root
    mode: 0600
  tags:
    - permissions

- name: "Security patches are up to date"
  package:
    name: "*"
    state: latest
  tags:
    - skip_ansible_lint
...
