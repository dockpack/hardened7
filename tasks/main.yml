---

- name: assert current platform
  assert:
    that:
      - ansible_os_family == 'RedHat'
      - ansible_distribution_major_version == "7"

- name: check presence of portmapper
  stat:
    path: /var/run/rpcbind.sock
  register: portmapper

- name: disable portmapper
  systemd:
    name: rpcbind.socket
    state: stopped
    enabled: false
  ignore_errors: true
  when: portmapper.stat.exists

- name: configure mail transfer agent for local-only mode
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^inet_interfaces'
    line: 'inet_interfaces = localhost'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: configure mail transfer agent for mydomain
  when: mydomain is defined
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^mydomain ='
    line: 'mydomain = {{ mydomain }}'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: configure mail transfer agent for mydomain.mydomain
  when: mydomain is defined
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^myhostname ='
    line: 'myhostname = {{ inventory_hostname }}.{{ mydomain }}'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: configure mail transfer agent for smtp
  when: mydomain is defined
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^myorigin = '
    line: 'myorigin = $mydomain'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: do not disclose software version in SMTP banner
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: 'smtpd_banner'
    line: 'smtpd_banner = $myhostname ESMTP'
    state: present
  notify: restart postfix

- name: configure mail transfer agent for ipv4 only
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^inet_protocols'
    line: 'inet_protocols = ipv4'
    state: present
  ignore_errors: true
  notify: restart postfix

- name: remove insecure daemons
  yum:
    name: "{{ insecure_daemons }}"
    state: absent
  ignore_errors: true

- name: remove rsh trust files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/hosts.equiv
    - /root/hosts.equiv

- name: install tcp_wrappers for SSH and HTTPS
  when: tcp_wrappers is defined and tcp_wrappers|bool
  template:
    src: "{{ item }}"
    dest: /etc/
    owner: root
    group: root
  with_items:
    - hosts.allow
    - hosts.deny

- name: manage kernel module loading
  copy:
    src: disabled.conf
    dest: /etc/modprobe.d/disabled.conf
    owner: root
    group: root

- name: manage kernel modules
  copy:
    src: modprobe.conf
    dest: /etc/modprobe.d/CIS.conf
    owner: root
    group: root

- name: manage kernel options
  when: disable_ipv6 is defined and disable_ipv6|bool
  copy:
    src: "{{ item }}"
    dest: "/etc/modprobe.d/{{ item }}"
    owner: root
    group: root
  with_items:
    - disabled.conf

- name: disable interface usage of ipv6
  when: disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: '^NETWORKING_IPV6'
    line: 'NETWORKING_IPV6=no'
    state: present

- name: Increase DNS query attempts
  lineinfile:
    path: /etc/sysconfig/network
    regexp: "^RES_OPTIONS="
    line: 'RES_OPTIONS="timeout:1 attempts:5"'
  notify: restart network
  tags:
    - dnsconfig

- name: disable interface usage of ipv6
  when: disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: '^IPV6INIT'
    line: 'IPV6INIT=no'
    state: present

- name: check if libtirpc confile file is present
  stat:
    path: /etc/netconfig
  register: netconfig

- name: disable support for rpc udp6
  when: netconfig.stat.exists and disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/netconfig
    regexp: 'udp6'
    line: '# udp6       tpi_clts      v     inet6    udp     -       -'
    state: present

- name: disable support for rpc ipv6
  when: netconfig.stat.exists and disable_ipv6 is defined and disable_ipv6|bool
  lineinfile:
    dest: /etc/netconfig
    regexp: 'tcp6'
    line: '# tcp6       tpi_cots_ord  v     inet6    tcp     -       -'
    state: present

- name: disable zeroconf networking
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: '^NOZEROCONF'
    line: 'NOZEROCONF=yes'
    state: present

- name: update packages
  yum:
    state: latest
    name:
      - openssh
      - openssh-clients
      - openssh-server
      - libsemanage-python
      - policycoreutils-python
      - ca-certificates
      - jq
      - screen
  tags:
    - skip_ansible_lint  # here we do want latest
    - openssh

- name: manage direct root login device
  copy:
    content: tty1
    dest: /etc/securetty
    owner: root
    group: root
    mode: 0600

- name: ensure the logon.defs are set
  template:
    src: login.defs.j2
    dest: /etc/login.defs
    owner: root
    group: root
    mode: 0644

- name: create the password policy file
  when: pwquality is defined and pwquality|bool
  template:
    src: pwquality.conf.j2
    dest: /etc/security/pwquality.conf
    owner: root
    group: root
    mode: 0644

- name: set account expiration following inactivity
  lineinfile:
    state: present
    dest: /etc/default/useradd
    regexp: '^INACTIVE='
    line: 'INACTIVE=0'

- name: set interactive session timeout
  lineinfile:
    state: present
    dest: /etc/profile
    regexp: '^TMOUT='
    line: 'TMOUT={{ TMOUT }}'

- name: Setup bash command history timestamps
  template:
    src: history.sh
    dest: /etc/profile.d/history.sh
    owner: root
    group: root
    mode: 0644
  tags:
    - bash_history

- name: set password hashing algorithm in /etc/libuser.conf
  lineinfile:
    state: present
    dest: /etc/libuser.conf
    regexp: '^crypt_style'
    line: 'crypt_style = sha512'

- name: prevent log in to accounts with empty password - system-auth
  when: password_required is defined and password_required|bool
  replace:
    dest: /etc/pam.d/system-auth
    follow: true
    regexp: 'nullok'

- name: prevent log in to accounts with empty password - password-auth
  when: password_required is defined and password_required|bool
  replace:
    dest: /etc/pam.d/password-auth
    follow: true
    regexp: 'nullok'

- name: disable ctrl-alt-del reboot activation, please auditors
  file:
    path: /etc/systemd/system/ctrl-alt-del.target
    src: /dev/null
    state: link

- name: kernel core dumps must be disabled unless needed
  service:
    name: kdump
    enabled: false
    state: stopped
  ignore_errors: true

- name: manage kernel parameters
  template:
    src: 99-sysctl.conf.j2
    dest: /etc/sysctl.d/99-sysctl.conf
    owner: root
    group: root
  notify: reload kernel parameters

- name: ensure gpgcheck is activated on repository metadata
  lineinfile:
    path: /etc/yum.conf
    regexp: "^repo_gpgcheck="
    line: "repo_gpgcheck={{ repo_gpgcheck }}"
    state: present

- name: ensure gpgcheck is globally activated
  lineinfile:
    path: /etc/yum.conf
    regexp: "^gpgcheck="
    line: "gpgcheck={{ gpgcheck }}"
    state: present

- name: ensure gpgcheck is activated for local packages
  lineinfile:
    path: /etc/yum.conf
    regexp: "^localpkg_gpgcheck"
    line: "localpkg_gpgcheck={{ localpkg_gpgcheck }}"
    state: present

- name: ensure yum removes previous package versions
  lineinfile:
    path: /etc/yum.conf
    regexp: "^clean_requirements_on_remove"
    line: "clean_requirements_on_remove={{ clean_requirements_on_remove }}"

- name: ensure core dumps are restricted
  lineinfile:
    state: present
    dest: /etc/security/limits.conf
    regexp: '^#?\\*.*core'
    line: '* hard core 0'
    insertbefore: '^# End of file'

- name: limit the number of concurrent login sessions allowed per user
  lineinfile:
    state: present
    dest: /etc/security/limits.conf
    regexp: '^#?\\*.*maxlogins'
    line: '* hard maxlogins 10'
    insertbefore: '^# End of file'

- name: ensure prelink is disabled
  yum:
    name: prelink
    state: absent

- name: disable useless suid and sgid commands
  file:
    path: "{{ item }}"
    mode: 0755
  ignore_errors: true
  with_items:
    - "{{ useless_suid_sgid }}"

- name: SELinux security policy
  lineinfile:
    dest: /etc/selinux/config
    regexp: '^SELINUX=.*'
    line: 'SELINUX={{ SELINUX }}'
    state: present

- name: set SELinux type
  lineinfile:
    dest: /etc/selinux/config
    regexp: '^SELINUXTYPE.*'
    line: 'SELINUXTYPE={{ SELINUXTYPE }}'
    state: present

- name: restrict permissions on logfile
  file:
    path: /var/log/dmesg
    mode: 0640

- name: disable sebooleans that should be disabled
  seboolean:
    name: "{{ item }}"
    state: false
    persistent: true
  with_items: "{{ selinux_booleans_disable }}"
  when: ansible_selinux.status == "enabled"

- name: enable sebooleans that should be enabled
  seboolean:
    name: "{{ item }}"
    state: true
    persistent: true
  with_items: "{{ selinux_booleans_enable }}"
  when: ansible_selinux.status == "enabled"
